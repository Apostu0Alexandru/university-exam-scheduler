generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(uuid())
  clerkId               String                  @unique
  email                 String                  @unique
  firstName             String
  lastName              String
  role                  Role                    @default(STUDENT)
  enrollments           Enrollment[]
  notifications         Notification[]
  learningPreferences   LearningPreference[]
  recommendations       LearningRecommendation[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model Course {
  id                  String                 @id @default(uuid())
  code                String                 @unique
  name                String
  department          String
  enrollments         Enrollment[]
  exams               Exam[]
  studyResources      StudyResource[]
  recommendations     LearningRecommendation[]
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
}

model Enrollment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  semester  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId, semester])
}

model Room {
  id        String   @id @default(uuid())
  building  String
  number    String
  capacity  Int
  exams     Exam[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([building, number])
}

model Exam {
  id           String         @id @default(uuid())
  course       Course         @relation(fields: [courseId], references: [id])
  courseId     String
  startTime    DateTime
  endTime      DateTime
  room         Room?          @relation(fields: [roomId], references: [id])
  roomId       String?
  status       ExamStatus     @default(SCHEDULED)
  notifications Notification[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  exam      Exam     @relation(fields: [examId], references: [id])
  examId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudyResource {
  id                 String                 @id @default(uuid())
  title              String
  description        String
  url                String
  type               ResourceType
  course             Course                 @relation(fields: [courseId], references: [id])
  courseId           String
  recommendations    LearningRecommendation[]
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
}

model LearningPreference {
  id              String            @id @default(uuid())
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  preferredType   ResourceType
  studyDuration   Int  // in minutes
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model LearningRecommendation {
  id               String         @id @default(uuid())
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  course           Course         @relation(fields: [courseId], references: [id])
  courseId         String
  resource         StudyResource  @relation(fields: [resourceId], references: [id])
  resourceId       String
  reason           String
  priority         Int            @default(0)
  completed        Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

enum Role {
  STUDENT
  ADMIN
}

enum ExamStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
  RESCHEDULED
}

enum ResourceType {
  VIDEO
  ARTICLE
  PRACTICE_QUIZ
  FLASHCARDS
  TEXTBOOK
  NOTES
  OTHER
}
